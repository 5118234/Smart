/*
 * T4模板生成多文件输出管理类
 *
 * Copyright (c) 2015 Smallants
 * Dual licensed under the MIT and GPL licenses.
 * author:Liujunfei
 * Version: 1.0.0
 */
<#@ assembly name="Microsoft.CSharp.dll" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Runtime.Remoting.Messaging"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>

<#@ parameter name="config" type="System.Collections.Generic.Dictionary<string,string>" #>

<#+
// T4模板生成多文件输出管理类
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
        public bool IncludeInDefault;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();
	public string Name {get; set;}
	public string GetName(string name) {
		return this.Name.Substring(0,this.Name.Length-2)+name;
	}

	// 创建管理类 : var manager = Manager.Create(Host, GenerationEnvironment); 
    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }
	// 开始输出新的文件
    public void StartNewFile(String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name =this.GetName( name )};
    }
	// 文件尾
    public void StartFooter(bool includeInDefault = true) {
        CurrentBlock = footer;
        footer.IncludeInDefault = includeInDefault;
    }
	// 文件头
    public void StartHeader(bool includeInDefault = true) {
        CurrentBlock = header;
        header.IncludeInDefault = includeInDefault;
    }
	// 结束模块
    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }
	// 分割文件
    public virtual void Process(bool split, bool sync = true) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            if (!footer.IncludeInDefault)
                template.Remove(footer.Start, footer.Length);
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
            if (!header.IncludeInDefault)
                template.Remove(header.Start, header.Length);
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }
	// 获取自定义工具命名空间
    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }
    // 获取默认项目命名空间
    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }
	
    private class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;
		//获取默认项目命名空间
        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }
		// 获取自定义工具命名空间
        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split, bool sync) {
            if (templateProjectItem==null || templateProjectItem.ProjectItems == null)
                return;
            base.Process(split, sync);
            if (sync)
                projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
			this.Name=templateProjectItem.Name;
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
            foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
            foreach(var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach(String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
} 

/// <summary>
/// <para>PdmReader mTest = new PdmReader("D://design//CodeTest.pdm");</para>
///<para> mTest.InitData();</para>
/// </summary>
public class PdmReader
{
    public const string a = "attribute", c = "collection", o = "object";

    public const string cClasses = "c:Classes";
    public const string oClass = "o:Class";

    public const string cAttributes = "c:Attributes";
    public const string oAttribute = "o:Attribute";

	public const string cPackages= "c:Packages";
    public const string cTables = "c:Tables";
    public const string oTable = "o:Table";

	public const string ckColumns = "c:Key.Columns";
    public const string cColumns = "c:Columns";
    public const string oColumn = "o:Column";

    XmlDocument xmlDoc;
    XmlNamespaceManager xmlnsManager;
    /// <summary>构造函数 </summary>
    public PdmReader()
    {
        // TODO: 在此处添加构造函数逻辑
        xmlDoc = new XmlDocument();
    }
    /// <summary>构造函数 </summary>
    public PdmReader(string pdm_file)
    {
        PdmFile = pdm_file;
    }

    string pdmFile;
    /// <summary>
    /// Pdm文件名
    /// </summary>
    public string PdmFile
    {
        get { return pdmFile; }
        set
        {
            pdmFile = value;
            if (xmlDoc == null)
            {
				xmlDoc = new XmlDocument();
				xmlDoc.Load(pdmFile);
                xmlnsManager = new XmlNamespaceManager(xmlDoc.NameTable);
                xmlnsManager.AddNamespace("a", "attribute");
                xmlnsManager.AddNamespace("c", "collection");
                xmlnsManager.AddNamespace("o", "object");
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public IList<TableInfo> Tables { get; set; }
    /// <summary>
    /// 初始化加载TABLES
    /// </summary>
    public void InitData()
    {
        if (Tables == null) Tables = new List<TableInfo>();
        var xnPackages = xmlDoc.SelectNodes("//" + cPackages, xmlnsManager);
		if(xnPackages.Count==0) // 没有用包，直接添加表
		{
			var tablesNodes = xmlDoc.SelectNodes("//" + cTables, xmlnsManager);
			foreach (XmlNode tablesNode in tablesNodes)
			{
				foreach (XmlNode xnTable in tablesNode.ChildNodes)
				{
					var table=GetTable(xnTable);
					table.PackageName="";
					Tables.Add(table);
				}
			}
			return;
		}
		// 循环包添加表
		foreach (XmlNode xnPackage in xnPackages)
        {
			foreach (XmlNode package in xnPackage.ChildNodes)
			{
				string packageName="";
				foreach (XmlNode xnP in package.ChildNodes)
				{
					if (xnP.Name =="a:Name")
					{
						packageName = xnP.InnerText;
					}
					else if(xnP.Name==cTables)
					{
						foreach (XmlNode xnTable in xnP.ChildNodes)
						{
							var table=GetTable(xnTable);
							table.PackageName=packageName;
							Tables.Add(table);
						}
					}
				}
			}
		}
    }

    //初始化"o:Table"的节点
    private TableInfo GetTable(XmlNode xnTable)
    {
        TableInfo mTable = new TableInfo();
        XmlElement xe = (XmlElement)xnTable;
        mTable.TableId = xe.GetAttribute("Id");
        XmlNodeList xnTProperty = xe.ChildNodes;
        foreach (XmlNode xnP in xnTProperty)
        {
            switch (xnP.Name)
            {
                case "a:ObjectID": mTable.ObjectID = xnP.InnerText;
                    break;
                case "a:Name": mTable.Name = xnP.InnerText;
                    break;
                case "a:Code": mTable.Code = xnP.InnerText;
                    break;
                case "a:CreationDate": mTable.CreationDate = Convert.ToInt32(xnP.InnerText);
                    break;
                case "a:Creator": mTable.Creator = xnP.InnerText;
                    break;
                case "a:ModificationDate": mTable.ModificationDate = Convert.ToInt32(xnP.InnerText);
                    break;
                case "a:Modifier": mTable.Modifier = xnP.InnerText;
                    break;
                case "a:Comment": mTable.Comment = xnP.InnerText;
                    break;
                case "a:PhysicalOptions": mTable.PhysicalOptions = xnP.InnerText;
                    break;
                case "c:Columns": InitColumns(xnP, mTable);
                    break;
                case "c:Keys": InitKeys(xnP, mTable);
                    break;
            }
        }
		foreach (var keys in mTable.Keys)
		{
			foreach (var col in keys.Columns)
			{
				var column=mTable.Columns.FirstOrDefault(c=>c.ColumnId==col);
				if(column!=null) column.IsPrimaryKey=true;
			}
		}
        return mTable;
    }
    //初始化"c:Columns"的节点
    private void InitColumns(XmlNode xnColumns, TableInfo pTable)
    {
        foreach (XmlNode xnColumn in xnColumns)
        {
			var column = GetColumn(xnColumn);
            pTable.Columns.Add(column);
        }
    }

    //初始化c:Keys"的节点
    private void InitKeys(XmlNode xnKeys, TableInfo pTable)
    {
        foreach (XmlNode xnKey in xnKeys)
        {
            pTable.Keys.Add(GetKey(xnKey));
        }
    }

    private ColumnInfo GetColumn(XmlNode xnColumn)
    {
        ColumnInfo mColumn = new ColumnInfo();
        XmlElement xe = (XmlElement)xnColumn;
        mColumn.ColumnId = xe.GetAttribute("Id");
        XmlNodeList xnCProperty = xe.ChildNodes;
        foreach (XmlNode xnP in xnCProperty)
        {
            switch (xnP.Name)
            {
                case "a:ObjectID": mColumn.ObjectID = xnP.InnerText;
                    break;
                case "a:Name": mColumn.Name = xnP.InnerText;
                    break;
                case "a:Code": mColumn.Code = xnP.InnerText;
                    break;
                case "a:CreationDate": mColumn.CreationDate = Convert.ToInt32(xnP.InnerText);
                    break;
                case "a:Creator": mColumn.Creator = xnP.InnerText;
                    break;
                case "a:ModificationDate": mColumn.ModificationDate = Convert.ToInt32(xnP.InnerText);
                    break;
                case "a:Modifier": mColumn.Modifier = xnP.InnerText;
                    break;
                case "a:Comment": mColumn.Comment = xnP.InnerText;
                    break;
                case "a:DataType": mColumn.DataType = xnP.InnerText;
                    break;
                case "a:Length": mColumn.Length = xnP.InnerText;
                    break;
                case "a:Identity": mColumn.Identity = string.Compare(xnP.InnerText, "true", true) == 0;
                    break;
                case "a:Mandatory":
                case "a:Column.Mandatory": 
                    mColumn.Mandatory = string.Compare(xnP.InnerText, "1", true) == 0;
                    break;
                case "a:PhysicalOptions": mColumn.PhysicalOptions = xnP.InnerText;
                    break;
                case "a:ExtendedAttributesText": mColumn.ExtendedAttributesText = xnP.InnerText;
                    break;
            }
        }
        return mColumn;
    }

    private PdmKey GetKey(XmlNode xnKey)
    {
        PdmKey mKey = new PdmKey();
        XmlElement xe = (XmlElement)xnKey;
        mKey.KeyId = xe.GetAttribute("Id");
        XmlNodeList xnKProperty = xe.ChildNodes;
        foreach (XmlNode xnP in xnKProperty)
        {
            switch (xnP.Name)
            {
                case "a:ObjectID": mKey.ObjectID = xnP.InnerText;
                    break;
                case "a:Name": mKey.Name = xnP.InnerText;
                    break;
                case "a:Code": mKey.Code = xnP.InnerText;
                    break;
                case "a:CreationDate": mKey.CreationDate = Convert.ToInt32(xnP.InnerText);
                    break;
                case "a:Creator": mKey.Creator = xnP.InnerText;
                    break;
                case "a:ModificationDate": mKey.ModificationDate = Convert.ToInt32(xnP.InnerText);
                    break;
                case "a:Modifier": mKey.Modifier = xnP.InnerText;
                    break;
                case "c:Key.Columns":
					foreach (XmlNode col in xnP.ChildNodes)
					{
						mKey.Columns.Add(col.Attributes["Ref"].Value);
					}
					break;
			}
        }
        return mKey;
    }
}

/// <summary>
/// 列信息
/// </summary>
public class ColumnInfo
{
    /// <summary>
    /// 列名称
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// 列名
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// 列说明
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// 数据类型
    /// </summary>
    public string DataType { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Length { get; set; }
    /// <summary>
    /// 是否标识列
    /// </summary>
    public bool Identity { get; set; }
    //禁止为空
    public bool Mandatory { get; set; }
	/// <summary>
    /// 是否主键
    /// </summary>
	public bool IsPrimaryKey {get; set;}
	/// <summary>
    /// 列ID
    /// </summary>
    public string ColumnId { get; set; }
    /// <summary>
    /// 所属对象ID
    /// </summary>
    public string ObjectID { get; set; }
	/// <summary>
    /// 创建日期
    /// </summary>
    public int CreationDate { get; set; }
    /// <summary>
    /// 创建人
    /// </summary>
    public string Creator { get; set; }
    /// <summary>
    /// 修改日期
    /// </summary>
    public int ModificationDate { get; set; }
    /// <summary>
    /// 修改人
    /// </summary>
    public string Modifier { get; set; }
    //扩展属性
    public string ExtendedAttributesText { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string PhysicalOptions { get; set; }
}

/// <summary>
/// 键信息
/// </summary>
public class PdmKey
{
	public PdmKey(){
		Columns=new List<string>();
	}
    /// <summary>
    /// 
    /// </summary>
    public string KeyId { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string ObjectID { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public int CreationDate { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Creator { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public int ModificationDate { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Modifier { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public IList<string> Columns { get; private set; }
}

/// <summary>
/// 表信息
/// </summary>
public class TableInfo
{
	public TableInfo(){
		Columns = new List<ColumnInfo>();
		Keys = new List<PdmKey>();
	}
	public string PackageName { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string TableId { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string ObjectID { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public int CreationDate { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Creator { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public int ModificationDate { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Modifier { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// 
    /// </summary>
    public string PhysicalOptions { get; set; }

    /// <summary>
    /// 
    /// </summary>
    public IList<ColumnInfo> Columns { get; private set; }

    /// <summary>
    /// 
    /// </summary>
    public IList<PdmKey> Keys { get; private set; }
}

EnvDTE.DTE GetDTE()
{
   IServiceProvider _ServiceProvider = (IServiceProvider)Host;
   EnvDTE.DTE dte = (EnvDTE.DTE)_ServiceProvider.GetService(typeof(EnvDTE.DTE));
   return dte;
}

EnvDTE.Project GetCurrentProject()
{
	var dte=GetDTE();
    Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
    var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
    return dteProject;
}
string GetSolutionPath()
{
    var dte=GetDTE();
	var dir = Path.GetDirectoryName(dte.Solution.FullName);
    return dir;
}
string GetSolutionPath(int upward) // 向上转 upward 个目录 
{
    var dte=GetDTE();
	var dir = Path.GetDirectoryName(dte.Solution.FullName);
	var paths=dir.TrimEnd('\\').Split('\\');
	if(upward>=paths.Length) return paths[0];
	var strs=new StringBuilder();
	for (int i = 0; i < paths.Length-upward; i++)
    {
        strs.AppendFormat("{0}\\",paths[i]);
    }
	return strs.ToString();
}
string GetProjectPath()
{
    var project = GetCurrentProject();
    var dir = Path.GetDirectoryName(project.FullName);
    return dir;
}
string GetConfigPath()
{
    var project = GetCurrentProject();
    foreach (EnvDTE.ProjectItem item in project.ProjectItems)
    {
        if (item.Name.Equals("App.config", StringComparison.InvariantCultureIgnoreCase) ||
            item.Name.Equals("Web.config", StringComparison.InvariantCultureIgnoreCase))
            return GetProjectPath() + "\\" + item.Name;
    }
    return String.Empty;
}

string GetSummary(XElement doc, string typeName)
{
	if(doc==null)return string.Empty;
	var result = from xe in doc.Descendants("member")
					   where xe.Attribute("name").Value.EndsWith(typeName)
					   select xe.Element("summary").Value;
	if (result.Count() > 0)
	{
	    return result.FirstOrDefault().Trim();
	}
	return string.Empty;
}

void SetParam(string key,object data)
{
	CallContext.LogicalSetData(key, data);
}

// 忽略大小写比较写
public class IgnoreCaseComparer : IEqualityComparer<string>
{
    public bool Equals(string x, string y)
    {
        return string.Compare(x, y, true) == 0;
    }

    public int GetHashCode(string obj)
    {
        return obj.GetHashCode();
    }
}
#>