/*
 * 服务代理生成
 *
 * Copyright (c) 2015 Smallants
 * Dual licensed under the MIT and GPL licenses.
 * author:Liujunfei
 * Version: 1.0.0
 */

<#@ output extension=".txt"#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="$(SolutionDir)T4\EnvDTE.dll" #>
<#@ assembly name="System.Windows.Forms.dll" #>
<#@ import namespace="System.Windows.Forms"#>
<#
    var summary_regex = new Regex(@"(?<=<summary>\s*)\S+?(?=\s*</summary>)", RegexOptions.Singleline);

    var manager = Manager.Create(Host,GenerationEnvironment);
    var xml = System.IO.File.ReadAllText(xml_file);
    var services = type_regex.Matches(xml);
	var assembly = LoadDll(dll_file);
	var xmlDoc = XElement.Load(xml_file);
	var summaryFiled = typeof(XElement).GetField("content", BindingFlags.Instance | BindingFlags.NonPublic);
	var serviceInterfaces = assembly.ExportedTypes.Where(t => t.Name.StartsWith("I") && t.Name.EndsWith("Service"));
	var message = new StringBuilder();
#>
<# manager.StartHeader(); #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Smart.Core.Extensions;

<# manager.EndBlock(); #>

<# manager.StartNewFile("WebApi.cs"); #>
namespace <#=nameSpace#>
{
<#
message.Clear();

foreach (var serviceInterface in serviceInterfaces)
{
	var interfaceNode=  (from node in xmlDoc.Descendants("member")
                     where node.Attribute("name").Value == "T:" + serviceInterface.FullName
                     select node).FirstOrDefault();
    if ( interfaceNode == null ) {
		message.AppendLine($"接口 {serviceInterface.FullName} 没有添加注释.");
	}
	else {
		var summary = summaryFiled.GetValue(interfaceNode).ToString().Split('\n');
    for (int i = 0; i < summary.Length; i++)
    {
		if(summary[i].Trim()==string.Empty) continue;
#>
    <#=$"/// {summary[i].Trim()}" #>
<#
    }	
}
#>
    internal partial class <#=serviceInterface.Name.Substring(1)#>Api : <#=serviceInterface.FullName#> 
    {
<#
   var methods = serviceInterface.GetMethods();

    foreach (var method in methods)
    {
		var methodNode = (from node in xmlDoc.Descendants("member")
                      where node.Attribute("name").Value.StartsWith($"M:{serviceInterface.FullName}.{method.Name}(")
                      select node).FirstOrDefault();
	    if (methodNode == null){
			methodNode = (from node in xmlDoc.Descendants("member")
                      where node.Attribute("name").Value.StartsWith($"M:{serviceInterface.FullName}.{method.Name}")
                      select node).FirstOrDefault();
		}
        if ( methodNode == null ) {
			message.AppendLine($"接口 {serviceInterface.FullName} 的方法 {method.Name} 没有添加注释.");
	    }
		else {
				// 方法摘要信息
			var summary = methodNode.ToString().Split('\n');
			for (int i = 1; i < summary.Length-1; i++)
			{
#>
        <#=$"/// {summary[i].Trim()}" #>
<#
			}
		}

        var parameters = method.GetParameters();
        var paramStr1 = new StringBuilder();
        var paramStr2 = new StringBuilder();
		for (int i = 0; i < parameters.Length; i++)
        {
			if ( i > 0 ) {
				paramStr1.Append(", ");
				paramStr2.AppendLine(", ");
				paramStr2.Append("                    ");
			}
			else {
				paramStr1.AppendLine();
				paramStr1.Append("            ");
				paramStr2.AppendLine();
				paramStr2.Append("                    ");
			}
            paramStr1.Append($"{parameters[i].ParameterType.ToString()} {parameters[i].Name}");
            paramStr2.Append("{ \""+parameters[i].Name+"\" , "+parameters[i].Name+".AsString() }");
        }
		if (paramStr2.Length>0) {
			paramStr2.AppendLine();
			paramStr2.Append("                ");
		}
        string returnStr = method.ReturnType == typeof(void) ? "void" : method.ReturnType.ToString().Replace("`1[","<").Replace("]",">");
#>
		public <#=returnStr#> <#=method.Name#>(<#=paramStr1#>)
		{
<#
	if(method.Name.StartsWith("Get"))
	{
		if(paramStr2.Length>0){
#>
			var responseJson = ApiClient.Get("<#=Regex.Match(serviceInterface.Name,"(?<=I).+(?=Service)").Value#>/<#=method.Name#>",
                new Dictionary<string, string> {<#=paramStr2#>});
<#
		}
		else{
#>
			var responseJson = ApiClient.Get("<#=Regex.Match(serviceInterface.Name,"(?<=I).+(?=Service)").Value#>/<#=method.Name#>");
<#
		}
#>
<#
	}
	else
	{
#>
			var responseJson = ApiClient.Post("<#=Regex.Match(serviceInterface.Name,"(?<=I).+(?=Service)").Value#>/<#=method.Name#>", <#=parameters[0].Name#>);
<#
	}
#>
            var response = responseJson.JsonTo<Core.Dtos.ApiResult>();
            if (!response.IsSuccess)
            {
                throw new Core.Exceptions.ServiceException(response.ErrorMessage);
            }
<#
			if(method.ReturnType != typeof(void)){
#>
            return response.Data.AsString().JsonTo<<#=returnStr#>>(); 
<#
			}
#>
		}

<#
    }
#>
    }

<#
} if (message.Length>0) MessageBox.Show(message.ToString(), "警告信息", MessageBoxButtons.OK, MessageBoxIcon.Warning);
#>
}

<# manager.StartNewFile("Service.cs"); #>
namespace <#=nameSpace#>
{
<#

message.Clear();
foreach (var serviceInterface in serviceInterfaces)
{
	var interfaceNode=  (from node in xmlDoc.Descendants("member")
                     where node.Attribute("name").Value == "T:" + serviceInterface.FullName
                     select node).FirstOrDefault();
    if ( interfaceNode == null ) {
		message.AppendLine($"接口 {serviceInterface.FullName} 没有添加注释.");
	}
	else {
		var summary = summaryFiled.GetValue(interfaceNode).ToString().Split('\n');
    for (int i = 0; i < summary.Length; i++)
    {
		if(summary[i].Trim()==string.Empty) continue;
#>
    <#=$"/// {summary[i].Trim()}" #>
<#
    }	
}
#>
    internal partial class <#=serviceInterface.Name.Substring(1)#> : <#=serviceInterface.FullName#> 
    {
	  private <#=serviceInterface.FullName#> _service
            = Smart.Core.SmartContext.Current.Resolve<<#=serviceInterface.FullName#>>("<#=serviceInterface.FullName#>");

<#
   var methods = serviceInterface.GetMethods();

    foreach (var method in methods)
    {
		var methodNode = (from node in xmlDoc.Descendants("member")
                      where node.Attribute("name").Value.StartsWith($"M:{serviceInterface.FullName}.{method.Name}(")
                      select node).FirstOrDefault();
	    if (methodNode == null){
			methodNode = (from node in xmlDoc.Descendants("member")
                      where node.Attribute("name").Value.StartsWith($"M:{serviceInterface.FullName}.{method.Name}")
                      select node).FirstOrDefault();
		}
        if ( methodNode == null ) {
			message.AppendLine($"接口 {serviceInterface.FullName} 的方法 {method.Name} 没有添加注释.");
	    }
		else {
				// 方法摘要信息
			var summary = methodNode.ToString().Split('\n');
			for (int i = 1; i < summary.Length-1; i++)
			{
#>
        <#=$"/// {summary[i].Trim()}" #>
<#
			}
		}

        var parameters = method.GetParameters();
        var paramStr1 = new StringBuilder();
        var paramStr2 = new StringBuilder();
		for (int i = 0; i < parameters.Length; i++)
        {
			if ( i > 0 ) {
				paramStr1.Append(", ");
				paramStr2.Append(", ");
			}
            paramStr1.Append($"{parameters[i].ParameterType.ToString()} {parameters[i].Name}");
            paramStr2.Append(parameters[i].Name);
			if(!parameters[i].ParameterType.IsValueType) paramStr2.Append(".Copy()");
        }
        string returnStr = method.ReturnType == typeof(void) ? "void" : method.ReturnType.ToString().Replace("`1[","<").Replace("]",">");
#>
		public <#=returnStr#> <#=method.Name#>(<#=paramStr1#>)
		{
<#
			if(method.ReturnType != typeof(void)){
#>
            return _service.<#=method.Name#>(<#=paramStr2#>); 
<#
			}
			else
			{
#>
            _service.<#=method.Name#>(<#=paramStr2#>); 
<#
			}
#>
		}

<#
    }
#>
    }

<#
} if (message.Length>0) MessageBox.Show(message.ToString(), "警告信息", MessageBoxButtons.OK, MessageBoxIcon.Warning);
#>
}
<# manager.EndBlock(); #>

}

<# manager.Process(true); #>