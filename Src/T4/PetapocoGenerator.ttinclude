/*
 * 基于PETAPOCO 的领域模型生成 
 *
 * Copyright (c) 2015 Smallants
 * Dual licensed under the MIT and GPL licenses.
 * author:Liujunfei
 * Version: 1.0.0
 */
<#@ output extension=".txt"#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="$(SolutionDir)T4\EnvDTE.dll" #>
<#@ parameter name="DataTypeMaps" type="System.Collections.Generic.Dictionary<string,string>" #>
<#@ parameter name="SequenceMaps" type="System.Collections.Generic.Dictionary<string,string>" #>
<#

var manager = Manager.Create(Host,GenerationEnvironment);

var tables = new List<TableInfo>();
if(!string.IsNullOrWhiteSpace(pdmFile) ) 
{
	addTables(tables,pdmFile,tableFilter);
} 
else if(System.IO.Directory.Exists(pdmPath))
{
	var files=Directory.GetFiles(pdmPath, "*.pdm");
	if(pdmFilter!=null) files=files.Where(pdmFilter).ToArray();
	foreach(var file in files)
	{
		addTables(tables,file,tableFilter);
	}
}
if(tables.Count == 0)
{
#>
	没有可生成的内容
<#
}
else
{
	tables = tables.OrderBy(t=>t.Code).ToList();
}
#><# manager.StartHeader(); #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Smart.Core.Extensions;
using PetaPoco;

<# manager.EndBlock(); #>
<# manager.StartNewFile("Entites.cs"); #>
namespace <#=manager.DefaultProjectNamespace#>.Entites
{
<#
	foreach(var pdmTable in tables)
	{
		var className= pdmTable.Code;
		if(ToUpper) className=className.ToUpper();
#>
    /// <summary>
    /// <#=pdmTable.PackageName#> <#=pdmTable.Comment??getCnName(pdmTable.Name)#> 实体类
    /// </summary>
	[PetaPoco.TableName("<#=pdmTable.Code#>")]
<#
	var keys=pdmTable.Columns.Where(c=>c.IsPrimaryKey).ToList();
	if(keys.Count > 0)
	{
		string sequence="";
	    if(SequenceMaps!=null){ 
			SequenceMaps.TryGetValue(className,out sequence);
			if(!string.IsNullOrEmpty(sequence)){
				sequence = ", SequenceName = \""+sequence+"\"";
				//keys[0].Identity = true;
			}
		}
#>
	[PetaPoco.PrimaryKey("<#=keys[0].Code#>", AutoIncrement = <#=keys[0].Identity?"true":"false"#><#=sequence??""#>)] 
<#
	}
#>	
	public partial class <#=className#>
	{
<#
	foreach(var pdmColumn in pdmTable.Columns)
	{
		var propName = pdmColumn.Code;
		var dispName = getCnName(pdmColumn.Name);
		if(ToUpper) propName=propName.ToUpper();
		if(columnFilter==null || columnFilter(pdmTable,pdmColumn))
		{
		    string csType = null;
		    if(DataTypeMaps!=null)
		    {
		        DataTypeMaps.TryGetValue(className+"."+propName,out csType);
		    }
			if(csType==null && propName=="DTKZXX")
			{
				csType="dynamic";
			}
		    if(string.IsNullOrEmpty(csType))
		    {	
		        //ctype=GetPropertyType(column.DataType)+(IsNullableAll && column.DataType!=typeof(string)?"?":"");
				csType=getCType(pdmColumn.DataType,!pdmColumn.Mandatory &&!pdmColumn.IsPrimaryKey);
		    }
#>
         /// <summary>
         /// 获取或设置 <#=getComment(pdmColumn)#>
         /// </summary>
		public <#=csType#> <#=propName#> { get; set; }
<#
		} //end if
	} // end foreach
#>
	}
<#
	} // end foreach
#>
} 
<# manager.EndBlock(); #>
<# manager.StartNewFile("DbContext.cs");#>
namespace <#=manager.DefaultProjectNamespace#>.Context
{
    public partial class <#=dbContextName#>
    {
        //[EditorBrowsable(EditorBrowsableState.Never)]
        public PetaPoco.Database Database { get; private set; }

        public <#=dbContextName#>(string connectionStringName)
        {
            Database = new DbContext(connectionStringName);
        }

        public PetaPoco.ITransaction GetTransaction()
        {
            return this.Database.GetTransaction();
        }
		
		public bool IsNew(object poco)
        {
            return this.Database.IsNew(poco);
        }
		public int Execute(Sql sql)
        {
            return this.Database.Execute(sql);
        }
        public int Execute(string sql, params object[] args)
        {
            return this.Database.Execute(sql, args);
        }
        public T ExecuteScalar<T>(Sql sql)
        {
            return this.Database.ExecuteScalar<T>(sql);
        }
        public T ExecuteScalar<T>(string sql, params object[] args)
        {
            return this.Database.ExecuteScalar<T>(sql, args);
        }

		public IEnumerable<T> Query<T>(string sql, params object[] args)
        {
            return this.Database.Query<T>(sql, args);
        }
        public IEnumerable<T> Query<T>(Sql sql)
        {
            return this.Database.Query<T>(sql);
        }
        public IEnumerable<TRet> Query<T1, T2, TRet>(Func<T1, T2, TRet> cb, string sql, params object[] args)
        {
            return this.Database.Query<T1, T2, TRet>(cb, sql, args);
        }
        public IEnumerable<TRet> Query<T1, T2, T3, TRet>(Func<T1, T2, T3, TRet> cb, string sql, params object[] args)
        {
            return this.Database.Query<T1, T2, T3, TRet>(cb, sql, args);
        }
        public IEnumerable<TRet> Query<T1, T2, T3, T4, TRet>(Func<T1, T2, T3, T4, TRet> cb, string sql, params object[] args)
        {
            return this.Database.Query<T1, T2, T3, T4, TRet>(cb, sql, args);
        }
        public IEnumerable<TRet> Query<T1, T2, TRet>(Func<T1, T2, TRet> cb, Sql sql)
        {
            return this.Database.Query<T1, T2, TRet>(cb, sql);
        }
        public IEnumerable<TRet> Query<T1, T2, T3, TRet>(Func<T1, T2, T3, TRet> cb, Sql sql)
        {
            return this.Database.Query<T1, T2, T3, TRet>(cb, sql);
        }
        public IEnumerable<TRet> Query<T1, T2, T3, T4, TRet>(Func<T1, T2, T3, T4, TRet> cb, Sql sql)
        {
            return this.Database.Query<T1, T2, T3, T4, TRet>(cb, sql);
        }
        public IEnumerable<T1> Query<T1, T2>(string sql, params object[] args)
        {
            return this.Database.Query<T1, T2>(sql, args);
        }
        public IEnumerable<T1> Query<T1, T2, T3>(string sql, params object[] args)
        {
            return this.Database.Query<T1, T2, T3>(sql, args);
        }
        public IEnumerable<T1> Query<T1, T2, T3, T4>(string sql, params object[] args)
        {
            return this.Database.Query<T1, T2, T3, T4>(sql, args);
        }
        public IEnumerable<T1> Query<T1, T2>(Sql sql)
        {
            return this.Database.Query<T1, T2>(sql);
        }
        public IEnumerable<T1> Query<T1, T2, T3>(Sql sql)
        {
            return this.Database.Query<T1, T2, T3>(sql);
        }
        public IEnumerable<T1> Query<T1, T2, T3, T4>(Sql sql)
        {
            return this.Database.Query<T1, T2, T3, T4>(sql);
        }
        public IEnumerable<TRet> Query<TRet>(Type[] types, object cb, string sql, params object[] args)
        {
            return this.Database.Query<TRet>(types, cb, sql, args);
        }

        public Page<T> Page<T>(long page, long itemsPerPage, string sql, params object[] args)
        {
            return this.Database.Page<T>(page, itemsPerPage, sql, args);
        }
        public Page<T> Page<T>(long page, long itemsPerPage, Sql sql)
        {
            return this.Database.Page<T>(page, itemsPerPage, sql);
        }

        public bool Exists<T>(string sqlCondition, params object[] args)
        {
            return this.Database.Exists<T>(sqlCondition, args);
        }

        public T FirstOrDefault<T>(string sql, params object[] args)
        {
            return this.Database.FirstOrDefault<T>(sql, args);
        }
        public T FirstOrDefault<T>(Sql sql)
        {
            return this.Database.FirstOrDefault<T>(sql);
        }

        public IGridReader QueryMultiple(Sql sql)
        {
            return this.Database.QueryMultiple(sql);
        }
        public IGridReader QueryMultiple(string sql, params object[] args)
        {
            return this.Database.QueryMultiple(sql, args);
        }

		#region DbSet
<#
	foreach(var pdmTable in tables)
	{
		var className=pdmTable.Code;
		if(ToUpper) className=className.ToUpper();
#>
        private DbSet<#=className#> _<#=className#>;
        public DbSet<#=className#> <#=className#> { get { return _<#=className#> ?? (_<#=className#> = new DbSet<#=className#>()); } }
<#
	} //end foreach
#>
	#endregion
	
	}
	
<#
	foreach(var pdmTable in tables)
	{
		var className=pdmTable.Code;
		if(ToUpper) className=className.ToUpper();
#>
	public class DbSet<#=className#> : DbSet<Entites.<#=className#>>
    {
		/// <summary>
        /// 获取表名
        /// </summary>
		public string TableName { get { return "<#=pdmTable.Code#>"; } }
<#
		foreach(var pdmColumn in pdmTable.Columns)
		{
			string propName = pdmColumn.Code;
#>
		/// <summary>
        /// 获取 <#=className#> 表的 <#=propName#> 列的列名
        /// </summary>
		public string <#=propName#> { get { return "<#=propName#>"; } }
<#
		}
#>
        
		public int Delete(Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.Delete<Entites.<#=pdmTable.Code#>>(sql(this), args);
        }
      
	    public bool Exists(Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.Exists<Entites.<#=pdmTable.Code#>>(sql(this), args);
        }
      
	    public Entites.<#=pdmTable.Code#> First(Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.First<Entites.<#=pdmTable.Code#>>(sql(this), args);
        }
      
	    public Entites.<#=pdmTable.Code#> FirstOrDefault(Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.FirstOrDefault<Entites.<#=pdmTable.Code#>>(sql(this), args);
        }

        public PetaPoco.Page<Entites.<#=pdmTable.Code#>> Page(long page, long itemsPerPage, Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.Page<Entites.<#=pdmTable.Code#>>(page, itemsPerPage, sql(this), args);
        }

        public IEnumerable<Entites.<#=pdmTable.Code#>> Query(Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.Query<Entites.<#=pdmTable.Code#>>(sql(this), args);
        }

        public int Update(Func<DbSet<#=pdmTable.Code#>, string> sql, params object[] args)
        {
            return repo.Update<Entites.<#=pdmTable.Code#>>(sql(this), args);
        }

        public int Update<Tkey>(Tkey pkValue, object poco)
        {
            return this.repo.Update("<#=pdmTable.Code#>", $"<#=pdmTable.Code#>Id", poco, pkValue);
        }

	}
<#
	} //end foreach
#>
	
    public partial class DbContext : PetaPoco.Database
    {
        public DbContext(string connectionStringName) : base(connectionStringName)
        {
        }
        public override void OnExecutingCommand(System.Data.IDbCommand cmd)
        {
            base.OnExecutingCommand(cmd);
        }
		public override bool OnException(Exception x)
        {
            var logger = Smart.Core.SmartContext.Current.Resolve<log4net.ILog>();
            logger.Error($"数据库操作异常，最后执行的SQL: \r\n {this.LastCommand} \r\n错误信息：{x.Message}\r\n详细错误：{x.StackTrace }");
            return base.OnException(x);
        }
    }

    public partial class DbSet<T> where T : class
    {
        internal PetaPoco.IDatabase repo 
		{ 
			get { return Smart.Core.SmartContext.Current.Resolve<<#=dbContextName#>>().Database; }
		}

        public int Update(string sql, params object[] args) 
		{
			return repo.Update<T>(sql, args); 
		}

        public int Update(PetaPoco.Sql sql) 
		{ 
			return repo.Update<T>(sql); 
		}

		public int Delete(string sql, params object[] args) 
		{ 
			return repo.Delete<T>(sql, args); 
		}
     
	    public int Delete(PetaPoco.Sql sql) 
		{ 
			return repo.Delete<T>(sql); 
		}
     
	    public int Delete(object primaryKey) { 
			return repo.Delete<T>(primaryKey); 
		}
     
	    public bool Exists(object primaryKey) { 
			return repo.Exists<T>(primaryKey); 
		}
      
	    public bool Exists(string sql, params object[] args) 
		{ 
			return repo.Exists<T>(sql, args); 
		}
       
	    public T FirstOrDefault(string sql, params object[] args) 
		{ 
			return repo.FirstOrDefault<T>(sql, args); 
		}
       
	    public T FirstOrDefault(PetaPoco.Sql sql) 
		{ 
			return repo.FirstOrDefault<T>(sql); 
		}
       
	    public T First(string sql, params object[] args) 
		{ 
			return repo.First<T>(sql, args); 
		}
      
	    public T First(PetaPoco.Sql sql) 
		{ 
			return repo.First<T>(sql); 
		}
      
	    public PetaPoco.Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) 
		{ 
			return repo.Page<T>(page, itemsPerPage, sql, args); 
		}
       
	    public PetaPoco.Page<T> Page(long page, long itemsPerPage, PetaPoco.Sql sql) 
		{ 
			return repo.Page<T>(page, itemsPerPage, sql); 
		}
        
		public IEnumerable<T> Query(string sql, params object[] args) 
		{ 
			return repo.Query<T>(sql, args); 
		}
        
		public IEnumerable<T> Query(PetaPoco.Sql sql) 
		{ 
			return repo.Query<T>(sql); 
		}
    }
}
<# manager.EndBlock();#>

<# manager.Process(true); #>
<#+
	void addTables(List<TableInfo> tables,string pdmfile,Func<TableInfo, bool> tablefilter) {
		if(File.Exists(pdmfile)) {
			var pdm=new PdmReader(pdmfile);
			pdm.InitData();
			var items = tablefilter==null ? pdm.Tables : pdm.Tables.Where(tablefilter);
			foreach(var item in items)
			{
				if(tables.Find(t=>string.Compare(t.Code,item.Code,true)==0)==null) tables.Add(item);
			}
		}
	}
	
	string getCnName(string name) {
		return Regex.Match(name,@"[\u4e00-\u9fa5]+").Value;
	}
	string getComment(ColumnInfo column) {
		return column.Comment?.Replace("\r\n"," ") ?? getCnName(column.Name);
	}
	string getCType(string datatype,bool isnullable) {
		var dbType=datatype.Split('(')[0].ToLower();
		int size=0;
		int xs=0;
		var match=System.Text.RegularExpressions.Regex.Match(datatype, @"(\d+),?(\d*)");
		if(match.Success){
			size=int.Parse(match.Groups[1].Value);
			int.TryParse(match.Groups[2].Value,out xs);
		}
		string sysType = "string";
		switch (dbType)
		{
		    case "bigint":
		        sysType = "long";
		        break;
		    case "smallint":
		        sysType = "short";
		        break;
			case "integer":
		    case "int":
		        sysType = "int";
		        break;
		    case "uniqueidentifier":
		        sysType = "Guid";
		        break;
		    case "smalldatetime":
		    case "datetime":
		    case "datetime2":
		    case "date":
		    case "time":
		        sysType = "DateTime";
		        break;
		    case "float":
		        sysType = "float";
		        break;		    
			case "double":
		        sysType = "double";
		        break;
		    case "real":
		        sysType = "float";
		        break;
		    case "number":
		    case "numeric":
			    if(xs > 0) sysType="double";
			    else sysType = size >= 10 ? "long" : "int";
		        break;
		    case "smallmoney":
		    case "decimal":
		    case "money":
		        sysType = "decimal";
		        break;
		    case "tinyint":
		        sysType = "byte";
		        break;
		    case "bit":
		        sysType = "bool";
		        break;
		    case "image":
		    case "raw":
		    case "blob":
		    case "bfile":
		    case "binary":
		    case "varbinary":
		    case "timestamp":
		        sysType = "byte[]";
		        break;
		}
		if(isnullable && sysType!="string" && sysType!="byte[]") sysType+="?";
		return sysType;
	}
#>