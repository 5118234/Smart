<#@ output extension=".txt"#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="$(SolutionDir)T4\EnvDTE.dll" #>
<#@ parameter name="DataTypeMaps" type="System.Collections.Generic.Dictionary<string,string>" #>
<#
//WIN7下需要以管理员身份运行VS，否则可能会导致连接数据库失败
//启用调试-下面两名必须同时启用
//System.Diagnostics.Debugger.Launch(); 
//System.Diagnostics.Debugger.Break(); 

var manager = Manager.Create(Host,GenerationEnvironment);

var tables = new List<TableInfo>();
if(!string.IsNullOrWhiteSpace(pdmFile) ) 
{
	addTables(tables,pdmFile,tableFilter);
} 
else if(System.IO.Directory.Exists(pdmPath))
{
	var files=Directory.GetFiles(pdmPath, "*.pdm");
	if(pdmFilter!=null) files=files.Where(pdmFilter).ToArray();
	foreach(var file in files)
	{
		addTables(tables,file,tableFilter);
	}
}
if(tables.Count == 0)
{
#>
	没有可生成的内容
<#
}
else
{
	tables = tables.OrderBy(t=>t.Code).ToList();
}
#><# manager.StartHeader(); #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Entity;

<# manager.EndBlock(); #>
<# manager.StartNewFile("Entites.cs"); #>
namespace <#=manager.DefaultProjectNamespace#>.Entites
{
<#
	foreach(var pdmTable in tables)
	{
		var className= pdmTable.Code;
		if(ToUpper) className=className.ToUpper();
#>
    /// <summary>
    /// <#=pdmTable.PackageName#> <#=pdmTable.Comment??getCnName(pdmTable.Name)#> 实体类
    /// </summary>
    [Serializable]
	public partial class <#=className#>
	{
<#
	foreach(var pdmColumn in pdmTable.Columns)
	{
		var propName = pdmColumn.Code;
		var dispName = getCnName(pdmColumn.Name);
		if(ToUpper) propName=propName.ToUpper();
		if(columnFilter==null || columnFilter(pdmTable,pdmColumn))
		{
		    string csType = null;
		    if(DataTypeMaps!=null)
		    {
		        DataTypeMaps.TryGetValue(className+"."+propName,out csType);
		    }
		    if(string.IsNullOrEmpty(csType))
		    {	
		        //ctype=GetPropertyType(column.DataType)+(IsNullableAll && column.DataType!=typeof(string)?"?":"");
				csType=getCType(pdmColumn.DataType,!pdmColumn.Mandatory);
		    }
#>
         /// <summary>
         /// 获取或设置 <#=getComment(pdmColumn)#>
         /// </summary>
		public virtual <#=csType#> <#=propName#> { get; set; }
<#
		} //end if
	} // end foreach
#>
	}
<#
	} // end foreach
#>
} 
<# manager.EndBlock(); #>
<# manager.StartNewFile("DbContext.cs"); #>
namespace <#=manager.DefaultProjectNamespace#>.Context
{
    /// <summary>
    /// DbContext 基础类
    /// </summary>
    internal partial class <#=dbContextName#> : Smart.Data.EF.EFDbContext
	{
		#region DbSet
<#
	var builders = new StringBuilder();

	foreach(var pdmTable in tables)
	{
		var className=pdmTable.Code;
		if(ToUpper) className=className.ToUpper();
		var keys=pdmTable.Columns.Where(c=>c.IsPrimaryKey).ToList();
		if(keys.Count==1)
		{
			var key = keys[0].Code;
			if(ToUpper) key = key .ToUpper();
			builders.AppendFormat("            modelBuilder.Entity<Entites.{0}>().HasKey(m => m.{1});\r\n",className,key);
			var col=pdmTable.Columns.FirstOrDefault(c=>c.Code==keys[0].Code);
			if(col!=null && col.DataType.ToLower().StartsWith("number"))
			{
					builders.AppendFormat("            modelBuilder.Entity<Entites.{0}>().Property(m => m.{1}).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);\r\n",className,key);
			}
		}
		else if(keys.Count>1)
		{
			builders.AppendFormat("            modelBuilder.Entity<Entites.{0}>().HasKey(m =>  new {{",className);
			var tempsb=new StringBuilder();
			for(int i=0;i<keys.Count;i++)
			{
				var key = keys[i].Code;
				if(i>0) builders.Append(",");
				builders.AppendFormat(" m.{0}",key);
				var col=pdmTable.Columns.FirstOrDefault(c=>c.Code==keys[0].Code);
				if(col!=null && col.DataType.ToLower().StartsWith("number"))
				{
						tempsb.AppendFormat("            modelBuilder.Entity<Entites.{0}>().Property(m => m.{1}).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);\r\n",className,key);
				}
			}
			builders.AppendLine(" });");
			builders.Append(tempsb.ToString());
		}
#>
		/// <summary>
		/// <#=pdmTable.Comment??getCnName(pdmTable.Name)#>
		/// </summary>
		public virtual DbSet<Entites.<#=className#>> <#=className#> { get; set; }
<#
	} //end foreach
#>	
        #endregion

		protected void BuilderPrimaryKey(DbModelBuilder modelBuilder)
		{
<#=builders.ToString()#>
		}
	}
}
<# manager.EndBlock(); #>
<# manager.Process(true); #>

<#+
	void addTables(List<TableInfo> tables,string pdmfile,Func<TableInfo, bool> tablefilter) {
		if(File.Exists(pdmfile)) {
			var pdm=new PdmReader(pdmfile);
			pdm.InitData();
			var items = tablefilter==null ? pdm.Tables : pdm.Tables.Where(tablefilter);
			foreach(var item in items)
			{
				if(tables.Find(t=>string.Compare(t.Code,item.Code,true)==0)==null) tables.Add(item);
			}
		}
	}
	
	string getCnName(string name) {
		return Regex.Match(name,@"[\u4e00-\u9fa5]+").Value;
	}
	string getComment(ColumnInfo column) {
		return column.Comment ?? getCnName(column.Name);
	}
	string getCType(string datatype,bool isnullable) {
		var dbType=datatype.Split('(')[0].ToLower();
		int size=0;
		int xs=0;
		var match=System.Text.RegularExpressions.Regex.Match(datatype, @"(\d+),?(\d*)");
		if(match.Success){
			size=int.Parse(match.Groups[1].Value);
			int.TryParse(match.Groups[2].Value,out xs);
		}
		string sysType = "string";
		switch (dbType)
		{
		    case "bigint":
		        sysType = "long";
		        break;
		    case "smallint":
		        sysType = "short";
		        break;
			case "integer":
		    case "int":
		        sysType = "int";
		        break;
		    case "uniqueidentifier":
		        sysType = "Guid";
		        break;
		    case "smalldatetime":
		    case "datetime":
		    case "datetime2":
		    case "date":
		    case "time":
		        sysType = "DateTime";
		        break;
		    case "float":
		        sysType = "float";
		        break;		    
			case "double":
		        sysType = "double";
		        break;
		    case "real":
		        sysType = "float";
		        break;
		    case "number":
		    case "numeric":
			    if(xs > 0) sysType="double";
			    else sysType = size >= 10 ? "long" : "int";
		        break;
		    case "smallmoney":
		    case "decimal":
		    case "money":
		        sysType = "decimal";
		        break;
		    case "tinyint":
		        sysType = "byte";
		        break;
		    case "bit":
		        sysType = "bool";
		        break;
		    case "image":
		    case "raw":
		    case "blob":
		    case "bfile":
		    case "binary":
		    case "varbinary":
		    case "timestamp":
		        sysType = "byte[]";
		        break;
		}
		if(isnullable && sysType!="string" && sysType!="byte[]") sysType+="?";
		return sysType;
	}
#>